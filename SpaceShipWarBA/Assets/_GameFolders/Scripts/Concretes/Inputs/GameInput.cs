//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/_GameFolders/Scripts/Concretes/Inputs/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SpaceShipWarBa.Inputs
{
    public partial class @GameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a7193839-655b-455a-85e9-f24e60c74e0a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2c53cd48-f193-44df-a6cc-6c5a072ac3ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0af09186-4487-47f4-89e9-da3d61fa0ce9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2610562f-4a39-4f2e-983f-654b1ac409a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0c94496e-e284-41f5-a6e1-554d0e443c11"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ade24300-89f6-4d91-8ade-4ec1d898f815"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bbe8b298-4aa1-4148-a3d7-8d966fd13f25"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""348ba663-e113-48d3-a857-5dc1edfee14c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c784e033-d57c-4068-ac58-db182f006cc5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b7ea1b9-65cd-4b73-833d-4085e4c54a12"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""862c6347-efba-4f6b-b765-0f938755b404"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5bce8c0-5595-43da-a0e9-fceeb6828a50"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Ui"",
            ""id"": ""cc7b73e8-46f6-4a84-a0ef-a65fa20dafe2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""144a99e4-edea-431c-b13d-8e09f2570807"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a89f987-68ae-40e6-8a45-0ccc0ed6864f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerOnFoot"",
            ""id"": ""a6314aa6-9753-4d74-8d36-5ab1efe57bfb"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6e6883c3-cd69-429c-97be-1fbb336fd02e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4077168-6fca-4f80-9546-69b40be6493f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerOnCar"",
            ""id"": ""aca18ae4-c361-4fe5-96b6-e628840543e8"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4cb4ac87-6ba5-4013-8291-1d59a7c03ee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00043534-6b16-4bd9-aeb8-e096c8b1b7d7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerOnPlane"",
            ""id"": ""8802e1df-9417-4d67-bd16-318a0b3b2bf4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c951d2d9-ff3d-46dd-972a-5cda71b8ea65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c9f9978-9709-474f-8f64-b93e9edd3ec2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            // Ui
            m_Ui = asset.FindActionMap("Ui", throwIfNotFound: true);
            m_Ui_Newaction = m_Ui.FindAction("New action", throwIfNotFound: true);
            // PlayerOnFoot
            m_PlayerOnFoot = asset.FindActionMap("PlayerOnFoot", throwIfNotFound: true);
            m_PlayerOnFoot_Newaction = m_PlayerOnFoot.FindAction("New action", throwIfNotFound: true);
            // PlayerOnCar
            m_PlayerOnCar = asset.FindActionMap("PlayerOnCar", throwIfNotFound: true);
            m_PlayerOnCar_Newaction = m_PlayerOnCar.FindAction("New action", throwIfNotFound: true);
            // PlayerOnPlane
            m_PlayerOnPlane = asset.FindActionMap("PlayerOnPlane", throwIfNotFound: true);
            m_PlayerOnPlane_Newaction = m_PlayerOnPlane.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Movement;
        public struct PlayerActions
        {
            private @GameInput m_Wrapper;
            public PlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Ui
        private readonly InputActionMap m_Ui;
        private IUiActions m_UiActionsCallbackInterface;
        private readonly InputAction m_Ui_Newaction;
        public struct UiActions
        {
            private @GameInput m_Wrapper;
            public UiActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Ui_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Ui; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UiActions set) { return set.Get(); }
            public void SetCallbacks(IUiActions instance)
            {
                if (m_Wrapper.m_UiActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_UiActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_UiActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_UiActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_UiActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public UiActions @Ui => new UiActions(this);

        // PlayerOnFoot
        private readonly InputActionMap m_PlayerOnFoot;
        private IPlayerOnFootActions m_PlayerOnFootActionsCallbackInterface;
        private readonly InputAction m_PlayerOnFoot_Newaction;
        public struct PlayerOnFootActions
        {
            private @GameInput m_Wrapper;
            public PlayerOnFootActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_PlayerOnFoot_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerOnFoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerOnFootActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerOnFootActions instance)
            {
                if (m_Wrapper.m_PlayerOnFootActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_PlayerOnFootActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_PlayerOnFootActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_PlayerOnFootActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_PlayerOnFootActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public PlayerOnFootActions @PlayerOnFoot => new PlayerOnFootActions(this);

        // PlayerOnCar
        private readonly InputActionMap m_PlayerOnCar;
        private IPlayerOnCarActions m_PlayerOnCarActionsCallbackInterface;
        private readonly InputAction m_PlayerOnCar_Newaction;
        public struct PlayerOnCarActions
        {
            private @GameInput m_Wrapper;
            public PlayerOnCarActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_PlayerOnCar_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerOnCar; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerOnCarActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerOnCarActions instance)
            {
                if (m_Wrapper.m_PlayerOnCarActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_PlayerOnCarActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_PlayerOnCarActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_PlayerOnCarActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_PlayerOnCarActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public PlayerOnCarActions @PlayerOnCar => new PlayerOnCarActions(this);

        // PlayerOnPlane
        private readonly InputActionMap m_PlayerOnPlane;
        private IPlayerOnPlaneActions m_PlayerOnPlaneActionsCallbackInterface;
        private readonly InputAction m_PlayerOnPlane_Newaction;
        public struct PlayerOnPlaneActions
        {
            private @GameInput m_Wrapper;
            public PlayerOnPlaneActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_PlayerOnPlane_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerOnPlane; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerOnPlaneActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerOnPlaneActions instance)
            {
                if (m_Wrapper.m_PlayerOnPlaneActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_PlayerOnPlaneActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_PlayerOnPlaneActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_PlayerOnPlaneActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_PlayerOnPlaneActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public PlayerOnPlaneActions @PlayerOnPlane => new PlayerOnPlaneActions(this);
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface IUiActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IPlayerOnFootActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IPlayerOnCarActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IPlayerOnPlaneActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
